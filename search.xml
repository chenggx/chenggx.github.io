<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL 各种锁的理解</title>
      <link href="/2019/02/14/ge-chong-suo-de-li-jie/"/>
      <url>/2019/02/14/ge-chong-suo-de-li-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前总是听说 MySQL 中的锁，一直没有具体的看过，晚上抽了空看了一点就先记录了下来，后面有机会在补充。</p></blockquote><h2 id="为什么需要锁"><a href="#为什么需要锁" class="headerlink" title="为什么需要锁"></a>为什么需要锁</h2><p>因为数据库是一个多用户共享的资源，也就是任何人都可以访问数据。当有一个商品表库存为1，当一个用户购买该商品的时候，首先需要查询商品的库存。如果一个人请求是没有任何问题的。但是当两个用户同时购买该商品的时候由于时间比较接近，当第一个用户查询完商品还未进行更新库存的时候，第二个用户就进来了，由于库存还没有更新，所以该用户也可以下单成功。最终将导致库存为-1，破幻了数据的一致性。为了解决这问题才有个锁的概念。</p><h2 id="有哪些锁"><a href="#有哪些锁" class="headerlink" title="有哪些锁"></a>有哪些锁</h2><ul><li>锁的类型<ul><li>读锁</li><li>写锁</li></ul></li><li>锁的粒度<ul><li>行锁</li><li>表锁</li></ul></li><li>持有锁的时间<ul><li>临时锁</li><li>持续锁</li></ul></li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><blockquote><p>说到锁那么接下来就需要了解隔离级别，了解隔离级别就需要了解数据库的四要素。</p></blockquote><h3 id="数据库四要素（ACID）"><a href="#数据库四要素（ACID）" class="headerlink" title="数据库四要素（ACID）"></a>数据库四要素（ACID）</h3><ul><li>原子性（Atomicity）：要么全部完成，要么全 <strong>不</strong> 完成。</li><li>一致性（Consistency）：一个事务单元提交后才可以被其他事务查看到。</li><li>隔离性（Isolation）：并发事务之间不相互影响。<em>设立了不同的隔离级别，通过适度破坏一致性来提高性能</em></li><li>持久性（Durability）：事物提交之后即持久化到磁盘中不会丢失。</li></ul><p><em><strong>锁只是实现隔离级别的几种方式之一，除了锁，实现并发问题的方式还有时间戳，多版本控制等等，这些也可以称为无锁的并发控制。</strong></em></p><h3 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h3><pre class=" language-mysql"><code class="language-mysql">select @@tx_isolation;  #查询当前隔离级别select @@global.tx_isolation;  #查询全局隔离级别set transaction isolation level read uncommitted;   #设置当前隔离级别为 RUset transaction isolation level read committed;   #设置当前隔离级别为 RCset transaction isolation level repeatable read;   #设置当前隔离级别为 RRset transaction isolation level serializable;   #设置当前隔离级别为 RS</code></pre><ul><li>读未提交（Read Uncommitted）：事务的读不阻塞其他事务的读和写，事务的写只阻塞其他事务的写，但不阻塞读。<strong>通过对写操作加“持续 X 锁”，对读操作不加锁实现。</strong></li><li>读已提交（Read Committed）：事务的读不阻塞其他事务的读和写，事务的写也会阻塞其他事务的读和写。<strong>通过对写操作加“持续 X 锁”，对读操作加“临时 S 锁”实现。</strong></li><li>可重复读（Repeatable Read）：事务的读会阻塞其他事务的写，但不阻塞读。事务的写会阻塞其他事务的读和写。<strong>通过对写操作加“持续 X 锁”，对读操作加“持续 S 锁”实现。</strong></li><li>序列化（Serializable）：最安全的一种级别，不会出现脏读、不可重复读、幻读问题。但是可能会导致大量的超时现象和锁竞争。<strong>使用的是表级锁</strong></li></ul><h3 id="可能产生的问题"><a href="#可能产生的问题" class="headerlink" title="可能产生的问题"></a>可能产生的问题</h3><p><img src="http://static.xiangdangnian.net.cn/blog/WX20190219-093153@2x.png" alt="WX20190219-093153@2x.png"></p><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>公司发工资，打了10000万到我的账户，但是该事务没有提交。这时我正好查看账户，发现10000元已经到账，非常开心。可以公司这时又发现发错了，于是回滚事务，修改金额为5000，然后提交事务。最终我实际得到的工资只有5000，空欢喜一场。</p><blockquote><p>这就是脏读，两个并发的事务，其中一个读取到了另一个没有提交的数据。</p></blockquote><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>拿着刚发的工资去买本书看看，付钱时系统读到我卡里有5000元，然而此时女友也拿着我的卡在消费，并花完了卡里的钱，并在我之前提交了事务，当我这边进行扣款的时候系统发现卡里没有钱了，提示扣款失败。我就十分纳闷，明明有钱啊，怎么。。。</p><blockquote><p> 这就是不可重复读，两个并发事务，在一个事务中读取到另一个事务中提交了的结果，第一事务在第二个事务提交前和提交后查看到的结果不一致。（主要是针对更新和删除操作）<strong>当隔离级别设置为Read committed时，避免了脏读，但是可能会造成不可重复读。</strong></p></blockquote><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>我又一个计划任务表，当前为空的。在第一个事务中我查看所有任务显示为空。这时女友在另一个事务增加了一条任务“早上起床做早饭”，并提交了事务。这是我又查看了一下所有任务发现还是空的，我就准备加一个任务“早上起床做早饭”，可是这时却提示我错误。我就纳了闷了，明明没有数据啊，怎么不让我加呢？难道出现了幻觉？</p><blockquote><p>这就是幻读。第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。（主要针对新增操作）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现负载均衡</title>
      <link href="/2019/01/27/shi-xian-fu-zai-jun-heng/"/>
      <url>/2019/01/27/shi-xian-fu-zai-jun-heng/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="http://static.xiangdangnian.net.cn/blog/2019-01-273.56.02.png" alt="架构图"></p><blockquote><p>简介： 用户访问负载均衡服务器，负载均衡服务器将相应的请求转发至应用服务器APP1或APP2。当前其中一台应用服务器down调的时候，负载均衡服务器将会把请求转发至另一台正常的服务器上。</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装负载均衡服务器"><a href="#安装负载均衡服务器" class="headerlink" title="安装负载均衡服务器"></a>安装负载均衡服务器</h3><h4 id="安装并启动-nginx-或使用-jellybool-的-sh-脚本"><a href="#安装并启动-nginx-或使用-jellybool-的-sh-脚本" class="headerlink" title="安装并启动 nginx (或使用 jellybool 的 sh 脚本)"></a>安装并启动 nginx (<a href="https://github.com/JellyBool/laravel-server-script/blob/master/laravel-nginx-proxy-server.sh" target="_blank" rel="noopener">或使用 jellybool 的 sh 脚本</a>)</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> LC_ALL<span class="token operator">=</span>en_US.UTF-8 add-apt-repository ppa:nginx/development -y<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> nginx<span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak<span class="token function">sudo</span> <span class="token function">service</span> nginx start</code></pre><h4 id="配置-nginx-服务器为负载均衡服务器"><a href="#配置-nginx-服务器为负载均衡服务器" class="headerlink" title="配置 nginx 服务器为负载均衡服务器"></a>配置 nginx 服务器为负载均衡服务器</h4><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> backend <span class="token punctuation">{</span>    <span class="token keyword">server</span> pravite<span class="token operator">-</span>ip<span class="token operator">-</span>address<span class="token number">-1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#应用服务器ip地址</span>    <span class="token keyword">server</span> pravite<span class="token operator">-</span>ip<span class="token operator">-</span>address<span class="token number">-2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#应用服务器ip地址</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span> default_server<span class="token punctuation">;</span>    <span class="token keyword">listen</span> <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span> default_server<span class="token punctuation">;</span>    <span class="token keyword">server_name</span> nuli<span class="token punctuation">.</span>io www<span class="token punctuation">.</span>nuli<span class="token punctuation">.</span>io<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">add_header</span> X<span class="token operator">-</span>Content<span class="token operator">-</span>Type<span class="token operator">-</span>Options nosniff<span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Scheme <span class="token variable">$scheme</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>NginX<span class="token operator">-</span><span class="token keyword">Proxy</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_hide_header</span> X<span class="token operator">-</span>Powered<span class="token operator">-</span>By<span class="token punctuation">;</span>        <span class="token keyword">proxy_hide_header</span> Vary<span class="token punctuation">;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>backend<span class="token punctuation">;</span>        <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="检测-nginx-配置并重启-nginx-服务"><a href="#检测-nginx-配置并重启-nginx-服务" class="headerlink" title="检测 nginx 配置并重启 nginx 服务"></a>检测 nginx 配置并重启 nginx 服务</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> nginx -t<span class="token function">sudo</span> <span class="token function">service</span> nginx reload</code></pre><h3 id="安装应用服务器-APP1"><a href="#安装应用服务器-APP1" class="headerlink" title="安装应用服务器 APP1"></a>安装应用服务器 APP1</h3><h4 id="安装-nginx-和-php-以及-php-扩展-或使用-jellybool-的-sh-脚本"><a href="#安装-nginx-和-php-以及-php-扩展-或使用-jellybool-的-sh-脚本" class="headerlink" title="安装 nginx 和 php 以及 php 扩展  或使用 jellybool 的 sh 脚本"></a>安装 nginx 和 php 以及 php 扩展  <a href="https://github.com/JellyBool/laravel-server-script/blob/master/laravel-app-server.sh" target="_blank" rel="noopener">或使用 jellybool 的 sh 脚本</a></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> zsh <span class="token function">htop</span> <span class="token function">zip</span> unzip composer<span class="token function">sudo</span> LC_ALL<span class="token operator">=</span>en_US.UTF-8 add-apt-repository ppa:nginx/development -y<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> nginx<span class="token function">sudo</span> <span class="token function">service</span> nginx start<span class="token function">sudo</span> LC_ALL<span class="token operator">=</span>en_US.UTF-8 add-apt-repository ppa:ondrej/php -y<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> php7.2<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> php7.2-mysql<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> php7.2-fpm<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> php7.2-curl php7.2-xml php7.2-json php7.2-gd php7.2-mbstring php7.2-bcmath<span class="token function">sudo</span> <span class="token function">service</span> php7.2-fpm restart<span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak</code></pre><h3 id="安装应用服务器-APP2-同-APP1"><a href="#安装应用服务器-APP2-同-APP1" class="headerlink" title="安装应用服务器 APP2 (同 APP1)"></a>安装应用服务器 APP2 (同 APP1)</h3><h3 id="测试负载均衡"><a href="#测试负载均衡" class="headerlink" title="测试负载均衡"></a>测试负载均衡</h3><ol><li>在 APP1 服务器上的 <code>/var/www/html</code> 目录下将 <code>index.html</code>文件内容更改为 APP1。</li><li>在 APP2 服务器上的 <code>/var/www/html</code> 目录下将 <code>index.html</code>文件内容更改为 APP2。</li><li>访问负载均衡服务器 ip 地址或配置的域名。此时页面将交替显示 APP1 和 APP2 。~~~成功。</li></ol><h3 id="使用-Envoy-将-Laravel-项目同时部署在所有负载均衡的机器上"><a href="#使用-Envoy-将-Laravel-项目同时部署在所有负载均衡的机器上" class="headerlink" title="使用 Envoy 将 Laravel 项目同时部署在所有负载均衡的机器上"></a>使用 Envoy 将 Laravel 项目同时部署在所有负载均衡的机器上</h3><ol><li>在本机上创建 Laravel 项目</li><li>将项目提交到 coding 或 github 上</li><li>配置 coding 或 github 的ssh （可选）</li><li>使用 ssh 或 https 的方式将项目部署到 APP1 和 APP2 服务器上</li><li>配置两台服务器的 .env 文件 <strong><strong>保证两台服务器的 APP_KEY 要一直</strong></strong></li><li>测试——<em>访问负载均衡服务器可以看到 Laravel 欢迎语</em></li><li>在本机中的 Laravel 项目中安装 Envoy 扩展  <a href="https://laravel-china.org/docs/laravel/5.7/envoy/2307" target="_blank" rel="noopener">参考文档</a></li><li>在项目根目录新增 <code>Envoy.blade.php</code> 文件并在文件中增加如下内容。「需要注意的是：本机可以通过 ssh 的方式访问对应的服务器」</li></ol><pre class=" language-php"><code class="language-php">@<span class="token function">servers</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'web-1'</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token string">'ssh root@192.168.3.11'</span><span class="token punctuation">,</span> <span class="token string">'web-2'</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token string">'ssh root@192.168.3.11'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@<span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'deploy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'on'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'web-1'</span><span class="token punctuation">,</span> <span class="token string">'web-2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'parallel'</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cd <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>laravel<span class="token operator">-</span>deploy   sudo git pull origin master@endtask</code></pre><ol start="9"><li>运行部署命令 <code>envoy run deploy</code>,如果输出内容没有错误的话，就表示部署成功，就可以在负载均衡服务器上进行查看了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGI, Fast-CGI，PHP-CGI，PHP-FPM 几个概念的总结</title>
      <link href="/2019/01/24/cgi-fast-cgi-php-cgi-php-fpm-li-jie-md/"/>
      <url>/2019/01/24/cgi-fast-cgi-php-cgi-php-fpm-li-jie-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开始学php的时候有几个概念一直没有弄明白，最近查了些资料，特此补充记录一下，以防忘记。有不对的地方还请高手指点。</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>CGI：WEB 服务器与 WEB 应用程序之间交换数据的一种协议。</li><li>FastCGI：同 CGI 一样，也是一种协议，只是在效率上比 CGI 好一些。</li><li>PHP-CGI：fastCGI 协议的一种实现。(也就是 php 可执行目录下的php-cgi程序)。他有2个问题。<ul><li>更改配置文件后无法平滑重启。</li><li>无法动态调整进制多少。</li></ul></li><li>spawn-fcgi：解决了 php-cgi 出现的问题。但器仅仅是一个进程管理器。</li><li>PHP-FPM：实现了 Fast-CGI 协议并且之前平滑重启，同时还带有进程管理功能。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.ietf.org/rfc/rfc3875" target="_blank" rel="noopener">CGI 协议内容</a></p><p><a href="http://andylin02.iteye.com/blog/648412" target="_blank" rel="noopener">Fast-CGI 协议内容</a></p><p><a href="http://yongxiong.leanote.com/post/%E4%BB%8ECGI%E5%88%B0FastCGI%E5%88%B0PHP-FPM" target="_blank" rel="noopener">从CGI到FastCGI到PHP-FPM</a></p><p><a href="https://www.awaimai.com/371.html" target="_blank" rel="noopener">CGI、FastCGI和PHP-FPM关系图解</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2019/01/21/wo-de-di-yi-pian-wen-zhang/"/>
      <url>/2019/01/21/wo-de-di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇文章"><a href="#我的第一篇文章" class="headerlink" title="我的第一篇文章"></a>我的第一篇文章</h1><blockquote><p>这是我的第一篇文章，主要记录一下hexo博客的建立和使用方法。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/HarleyWang93/blog/issues/1" target="_blank" rel="noopener">搭建参考</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">主题配置</a></p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li>需要安装git和Node.js</li><li>注册Github账号</li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li><p>使用npm全局安装hexo</p><pre class=" language-yaml"><code class="language-yaml">sudo npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>cli</code></pre></li><li><p>使用hexo init 初始化项目</p><pre class=" language-yaml"><code class="language-yaml">hexo init blog</code></pre></li><li><p>使用hexo s查看状态(默认访问该地址<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000 </a>)</p><pre class=" language-yaml"><code class="language-yaml">hexo s</code></pre></li></ol><h3 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h3><ol><li>创建仓库</li><li>开启Github Pages</li><li>选择分支</li></ol><h3 id="修改全局配置-注意：每个冒号后面都有个空格"><a href="#修改全局配置-注意：每个冒号后面都有个空格" class="headerlink" title="修改全局配置(注意：每个冒号后面都有个空格)"></a>修改全局配置(注意：每个冒号后面都有个空格)</h3><p>在项目中找到_config.yml文件，在文件最后添加如下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xxx/xxx.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><ol><li>执行生成静态文件命令</li></ol><pre class=" language-yaml"><code class="language-yaml">hexo g</code></pre><ol start="2"><li>安装git上传插件</li></ol><pre class=" language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git <span class="token punctuation">-</span><span class="token punctuation">-</span>save</code></pre><ol start="3"><li>执行上传静态文件命令</li></ol><pre class=" language-yaml"><code class="language-yaml">hexo d</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code>hexo new &quot;文章标题&quot;         //新建文章hexo new page &quot;页面名&quot;      //新建页面hexo g                     //生成静态文件至public目录hexo server                //开启本地访问hexo deploy                //部署到github</code></pre><h2 id="主题使用"><a href="#主题使用" class="headerlink" title="主题使用"></a>主题使用</h2><blockquote><p>具体详细内容查看项目链接 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery</a></p></blockquote><h3 id="文章头部示例"><a href="#文章头部示例" class="headerlink" title="文章头部示例"></a>文章头部示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg <span class="token comment" spellcheck="true"># 或者:http://xxx.com/xxx.jpg</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 如果top值为true，则会是首页推荐文章</span><span class="token comment" spellcheck="true"># 如果要对文章设置阅读验证密码的话，就可以在设置password的值，该值必须是用SHA256加密后的密码，防止被他人识破</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token comment" spellcheck="true"># 本文章是否开启mathjax，且需要在主题的_config.yml文件中也需要开启才行</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><blockquote><ol><li>如果img属性不填写的话，文章特色图会根据文章标题的hashcode的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。</li><li>date的值尽量保证每篇文章是唯一的，因为本主题中Gitalk和Gitment识别id是通过date的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在Front-matter中设置采用了SHA256加密的password的值，还需要在主题的_config.yml中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
